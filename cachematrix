
## A pair of functions that cache the inverse of a matrix.
## This function creates a special "matrix" object that can cache its inverse.


makeCachematrix<-function(x=matrix()){
    inver<-NULL
    set<-function(y){
        x<<-y
        inver<-NULL
    }
get<-function()x
setinver<-function(inverse) inver<-inverse
getinver<-function()inver
list(set=set, get=get,setinver=setinver, getinver=getinver)
}
2.cacheSolve
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
cacheSolve<-function(x,...) {
## Return a matrix that is the inverse of 'x'
inver<-x$getinver
    if(!is.null(inver)){
       message('Getting data')
    return(inver)}

dat<-x$get
inver<-solve(dat,...)
x$settinver(inver)
inver
}
